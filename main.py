import os
import json
import asyncio
import qrcode
import aiohttp
import aiocron
import datetime
from PIL import Image
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
from aiogram import F
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from test2 import get_last_posts_comments
from instaloader_script import get_latest_instagram_posts  
import pandas as pd
import urllib.parse
import random
import mysql.connector
import time
class WalletStates(StatesGroup):
    waiting_for_wallet = State()

with open('config.json', 'r', encoding='utf-8') as f:
    settings = json.load(f)
ref_bonus = 200
bot = Bot(token=settings['bot_token'])
dp = Dispatcher()
reminder_tasks = {}

conn = mysql.connector.connect(
    host="localhost",
    user="buser",
    password="buser",
    database="b1coin"
)
cursor = conn.cursor()

async def get_tweet():
    global latest_tweet
    cursor.execute("SELECT tweet_link FROM tweet ORDER BY id DESC LIMIT 1")
    tweet = cursor.fetchone()
    if tweet:
        latest_tweet = tweet[0]
    return latest_tweet
asyncio.run(get_tweet())
latest_posts = [
    "https://www.instagram.com/p/C8X4FIey21x/",
    "https://www.instagram.com/p/C8P3NWtRTjH/",
    "https://www.instagram.com/p/C8K0GrUyo1Q/"
]

async def update_latest_posts():
    global latest_posts
    latest_posts = await get_latest_instagram_posts('b1coin')
    print(f"Updated latest posts at {datetime.datetime.now()}: {latest_posts}")

# Set the TZ environment variable to a valid time zone, e.g., 'Europe/Berlin'
os.environ['TZ'] = 'Europe/Berlin'
# Ensure the time zone information is updated
time.tzset()
tasks = [
    {
        "id": 1,
        "title": "–ó–∞–¥–∞–Ω–∏–µ #1/15: –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram-–∫–∞–Ω–∞–ª –ø–æ–¥–∫–∞—Å—Ç–∞.",
        "description": "‚Äú–¢–¢ –ö—Ä–∏–ø—Ç–æ: Trading Talks‚Äù - —ç—Ç–æ –ø–æ–¥–∫–∞—Å—Ç –æ—Ç —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤ $B1COIN –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, —Ç—Ä–µ–π–¥–∏–Ω–≥ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.\n–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è  -  @tradingtalkscrypto",
        "link": "@tradingtalkscrypto",
        "reward": 200
    },
    {
        "id": 2,
        "title": "–ó–∞–¥–∞–Ω–∏–µ #2/15: –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ YouTube –∫–∞–Ω–∞–ª.",
        "description": "–í–∏–∫—Ç–æ—Ä –õ–∏–ø—Å–∫–∏–π, 1 –∏–∑ 2—Ö —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤ $B1COIN - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä —Å –æ–ø—ã—Ç–æ–º –≤ –∫—Ä–∏–ø—Ç–µ –±–æ–ª–µ–µ 6 –ª–µ—Ç.",
        "link": "https://www.youtube.com/@VICTOR_MOC",
        "reward": 300
    },
    {
        "id": 3,
        "title": "–ó–∞–¥–∞–Ω–∏–µ #3/15: –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Instagram $B1COIN.",
        "description": "–ò–∑ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–º–æ–≤ –±—É–¥–µ—Ç —Å–∞–º—ã–º –∫—Ä–∞—Å–æ—á–Ω—ã–º! –ê —Ç–∞–∫–∂–µ –≤–∏–¥–æ—Å—ã –ø—Ä–æ –ª–∞–º–±—É —Ç–∞–º —É–¥–æ–±–Ω–µ–π —Å–º–æ—Ç—Ä–µ—Ç—å...  ",
        "link": "https://www.instagram.com/b1coin",
        "reward": 200
    },
    {
        "id": 4,
        "title": "–ó–∞–¥–∞–Ω–∏–µ #4/15: –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Twitter (X) $B1COIN.",
        "description": "–¢–≤–∏—Ç—Ç–µ—Ä –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∞–Ω–≥–ª–æ–≥–æ–≤–æ—Ä—è—â—É—é $B1COIN ARMY !",
        "link": "https://x.com/B1Coin_TON",
        "reward": 400
    },
    {
        "id": 5,
        "title": "–í–æ–ø—Ä–æ—Å #1: –ö–∞–∫—É—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ü–µ–ª—å –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–µ–∫—Ç $B1COIN?",
        "description": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.",
        "options": ["A)–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–π –º–µ–º-—Ç–æ–∫–µ–Ω –Ω–∞ –ú–∞—Ä—Å–µ.\n", "B)–†–∞–∑–¥–∞—Ç—å –≤—Å–µ–º —Ö–æ–ª–¥–µ—Ä–∞–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–Ω—á–∏–∫–∏.\n", "C)–î–æ—Å—Ç–∏—á—å –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ $1 –º–ª—Ä–¥\n"],
        "optionss": ["A", "B", "C"],
        "correct_option": 2,
        "reward": 50,
        "correct_text": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n–ú–æ–ª–æ–¥—á–∏–Ω–∞!\n\n–•–æ—Ç—è —è –±—ã–ª –±—ã —É–¥–∏–≤–ª–µ–Ω, –µ—Å–ª–∏ –±—ã —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –±—ã–ª –ø—Ä–æ –ø–æ–Ω—á–∏–∫–∏...\n\n$B1COIN ARMY, –∫–æ—Ç–æ—Ä–∞—è —Å –Ω–∞–º–∏ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, —Å–º–æ–∂–µ—Ç –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª–µ–µ —Ö100 –∫ –∫–∞–ø–∏—Ç–∞–ª—É. \n\n–ê –¥–ª—è —ç—Ç–æ–≥–æ –º—ã —Ä–∞–∑–≥–æ–Ω–∏–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ $1 –º–ª—Ä–¥!\n\n–í—Å–µ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ - –≤–µ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞—Ä—Ä–∞—Ç–∏–≤ –∏, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, —é–º–æ—Ä!",
        "incorrect_text": "–ö–æ–Ω–µ—á–Ω–æ, –∏–¥–µ—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è...\n\n–ù–æ –µ—Å—Ç—å –∏ –ø–æ–∫—Ä—É—á–µ - –æ–∑–æ–ª–æ—Ç–∏—Ç—å –Ω–∞—à—É –ø—Ä–µ–¥–∞–Ω–Ω—É—é $B1COIN ARMY, –∫–æ—Ç–æ—Ä–∞—è —Å –Ω–∞–º–∏ —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞, –±–æ–ª–µ–µ —á–µ–º —Ö100 –∫ –∫–∞–ø–∏—Ç–∞–ª—É. \n\n–ê –¥–ª—è —ç—Ç–æ–≥–æ –º—ã —Ä–∞–∑–≥–æ–Ω–∏–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ $1 –º–ª—Ä–¥!\n\n–í—Å–µ, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ - –≤–µ—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–∞—Ä—Ä–∞—Ç–∏–≤ –∏, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, —é–º–æ—Ä!"
    
    },
    {
        "id": 6,
        "title": "–í–æ–ø—Ä–æ—Å #2: –ß—Ç–æ –¥–µ–ª–∞–µ—Ç $B1COIN —É–Ω–∏–∫–∞–ª—å–Ω—ã–º?",
        "description": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.",
        "options": ["A)–†–æ–∑—ã–≥—Ä—ã—à –Ω–∞—Å—Ç–æ—è—â–µ–π Lamborghini —Å—Ä–µ–¥–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤.\n", "B)–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∏—Ü—Ü—ã.\n", "C)–î–æ—Å—Ç—É–ø –∫ —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –º–µ–º–∞–º.\n"],
        "optionss": ["A", "B", "C"],
        "correct_option": 0,
        "reward": 50,
        "correct_text":"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n–ù—É –∞ –∫—Ç–æ —Å–æ–º–Ω–µ–≤–∞–ª—Å—è...\n\n–ß–µ—Å—Ç–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à –õ–∞–º–±—ã. –î–∞–∂–µ –±–µ–ª–∫–∏ –≤ –ª–µ—Å—É –æ–± —ç—Ç–æ–º –º–µ—á—Ç–∞—é—Ç!\n\n–•–æ–ª–¥–∏—à—å —Ç–æ–∫–µ–Ω—ã - –∫–∞–∂–¥—ã–µ —Å—É—Ç–∫–∏ –ø–æ–ª—É—á–∞–µ—à—å —Ç–∏–∫–µ—Ç—ã, –ø–æ–∑–≤–æ–ª—è—é—â–∏–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ª–æ—Ç–µ—Ä–µ–µ, –∞ –≤ –∫–æ–Ω—Ü–µ –≤—ã–±–∏—Ä–∞–µ—à—å —Ü–≤–µ—Ç, –≥–æ–≤–æ—Ä–∏—à—å –ª–æ–∫–∞—Ü–∏—é. \n\n–ê –∫—Ç–æ –≤ —Å–≤–æ—é –ø–æ–±–µ–¥—É –Ω–µ –≤–µ—Ä–∏—Ç - —Ç–æ—Ç –∏ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç.",
        "incorrect_text":"–†–µ–∞–ª—å–Ω–æ —Ç–∞–∫ –¥—É–º–∞–µ—à—å?\n–•–æ—Ç—è –≤ —Ü–µ–ª–æ–º... \n\n–ù–æ –≤—Å–µ —Ç–∞–∫–∏ –Ω–µ—Ç... –õ–∞–º–±—É —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º –∂–µ! –õ—é–±–æ–≥–æ —Ü–≤–µ—Ç–∞, –≤ –ª—é–±–æ–µ –º–µ—Å—Ç–æ... –•–æ—Ç—å –≤ –¢—é–º–µ–Ω—å –¥–æ—Å—Ç–∞–≤–∏–º!\n\n–ê —Ç–µ, –∫—Ç–æ –Ω–µ –≤–µ—Ä—è—Ç –≤ —Å–≤–æ—é –ø–æ–±–µ–¥—É - —Ç–µ –∏ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç."
    },
    {
        "id": 7,
        "title": "–í–æ–ø—Ä–æ—Å #3: –ü–æ—á–µ–º—É –≤ $B1COIN –Ω–∞ –∑–∞–ø—É—Å–∫–µ –Ω–µ—Ç –∫–∏—Ç–æ–≤ –∏ —Ñ–æ–Ω–¥–æ–≤?",
        "description": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.",
        "options": ["A)–ü–æ—Ç–æ–º—É —á—Ç–æ —Ñ–∞—É–Ω–¥–µ—Ä—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–±—ã–ª–∏ –∏—Ö –ø–æ–∑–≤–∞—Ç—å.\n", "B)–ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∏ –∫—Ä—É–ø–Ω–æ–≥–æ —Å–ª–∏–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤.\n", "C)–ü–æ—Ç–æ–º—É —á—Ç–æ –≤—Å–µ —Ñ–æ–Ω–¥—ã –∑–∞–Ω—è—Ç—ã –∑–∞–ø—É—Å–∫–æ–º –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n"],
        "optionss": ["A", "B", "C"],
        "correct_option": 1,
        "reward": 50,
        "correct_text":"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n–§–æ–Ω–¥—ã –Ω–∞ –±–æ—Ä—Ç—É - —ç—Ç–æ –¢–û–ü-1 —Ä–∏—Å–∫ –¥–ª—è –ª—é–±–æ–≥–æ –∫—Ä–∏–ø—Ç–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\n–ü–æ—ç—Ç–æ–º—É —É –Ω–∞—Å –∏—Ö –∏ –Ω–µ—Ç. –ê –≤—Å–µ —Ç–æ–∫–µ–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–æ–¥–∞–≤–∞—Ç—å—Å—è –≤ —Ä—ã–Ω–æ–∫ –ø–æ—Å–ª–µ –∞–∏—Ä–¥—Ä–æ–ø–∞, –±—É–¥—É—Ç –Ω–∞–º–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ—Ç–∫—É–ø–ª–µ–Ω—ã.\n\n–í–µ–¥—å —Å–ª–∏–≤–∞—Ç—å —ç—Ç–æ—Ç –∂–µ—Ç—Ç–æ–Ω –ø–æ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –º–∏–∑–µ—Ä–Ω–æ–π —Ü–µ–Ω–µ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ—á–µ–Ω—å –Ω–µ–¥–∞–ª—å–Ω–æ–≤–∏–¥–Ω—ã–π —á–µ–ª–æ–≤–µ–∫! (ü§°)",
        "incorrect_text":"–§–æ–Ω–¥—ã –Ω–∞ –±–æ—Ä—Ç—É - —ç—Ç–æ –¢–û–ü-1 —Ä–∏—Å–∫ –¥–ª—è –ª—é–±–æ–≥–æ –∫—Ä–∏–ø—Ç–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\n–û–Ω–∏ –ø–æ–ª—É—á–∞—é—Ç —Ç–æ–∫–µ–Ω—ã –∑–∞–¥–æ–ª–≥–æ –¥–æ –ø—Ä–µ—Å–µ–π–ª–∞ –∑–∞ –±–µ—Å—Ü–µ–Ω–æ–∫ –∏ –∑–∞—Ç–µ–º –Ω–µ—â–∞–¥–Ω–æ —Å–ª–∏–≤–∞—é—Ç –∏—Ö –≤ —Ç–æ–ª–ø—É.  \n\n–ü–æ—ç—Ç–æ–º—É –∫–∏—Ç–æ–≤ –∏ –∑–Ω–∞–∫–æ–º—ã–µ —Ñ–æ–Ω–¥—ã –º—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–∑–≤–∞–ª–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤. \n\nü´• –ë–æ–ª–µ–µ —Ç–æ–≥–æ –º—ã –æ—Ç–∫–∞–∑–∞–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä—É–ø–Ω—ã–º —Ä–µ–±—è—Ç–∞–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∏ –≤–µ–∂–ª–∏–≤–æ –ø–æ–ø—Ä–æ—Å–∏–ª–∏ –æ—Ç–∫—É–ø–∞—Ç—å –∏—Ö —Å —Ä—ã–Ω–∫–∞, —Ä–∞–∑ –æ–Ω–∏ –≤ –Ω–∞—Å —Ç–∞–∫ –≤–µ—Ä—è—Ç."
    },
    {
        "id": 8,
        "title": "–í–æ–ø—Ä–æ—Å #4: –ö—Ç–æ –æ—Å–Ω–æ–≤–∞–ª –ø—Ä–æ–µ–∫—Ç $B1COIN?",
        "description": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.",
        "options": ["A)–û—Å–Ω–æ–≤–∞—Ç–µ–ª–∏ —Ö–µ–¥–∂-—Ñ–æ–Ω–¥–∞ —Å –æ–ø—ã—Ç–æ–º –∑–∞–ø—É—Å–∫–∞ –±–ª–æ–∫—á–µ–π–Ω–∞ –∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞.\n", "B)–ì—Ä—É–ø–ø–∞ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤ –±–µ–∑ –æ–ø—ã—Ç–∞ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ.\n", "C)–ò–∑–≤–µ—Å—Ç–Ω—ã–π –º—É–∑—ã–∫–∞–Ω—Ç –∏ –∞–∫—Ç–µ—Ä.\n"],
        "optionss": ["A", "B", "C"],
        "correct_option": 0,
        "reward": 50,
        "correct_text":"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n–ù—É –∞ –∫—Ç–æ —Å–æ–º–Ω–µ–≤–∞–ª—Å—è...\n\n–í–∏–∫—Ç–æ—Ä & –ú–∞–∫—Å - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ñ–∞—É–Ω–¥–µ—Ä—ã, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –≤–∏–∑–∏–æ–Ω–µ—Ä—ã —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ, —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –∏ –∫—Ä–∏–ø—Ç–µ.\n\n–ù–æ –∏–º –Ω–µ –Ω—É–∂–Ω—ã –Ω–µ–ª–µ–ø—ã–µ –∑–≤–∞–Ω–∏—è –∏ —Ç–∏—Ç—É–ª—ã, —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å —Ç–≤–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ. \n\n–û–Ω–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç, –∫–∞–∫ —Ä–∞–∑–æ–≥–Ω–∞—Ç—å –∞–∫—Ç–∏–≤ –¥–æ $1 —è—Ä–¥–∞ –∫–∞–ø—ã!",
        "incorrect_text":"–í–∏–¥–∏–º–æ —Ç—ã —Å–º–µ—à–Ω–æ —à—É—Ç–∏—à—å –≤ –æ—Ñ–ª–∞–π–Ω-–∂–∏–∑–Ω–∏!\n\n–ó–æ–≤–∏ –Ω–∞ —Å—Ç–µ–Ω–¥–∞–ø-–∫–æ–Ω—Ü–µ—Ä—Ç—ã, –∫–æ–º–∏–∫!\n\n–í–∏–∫—Ç–æ—Ä & –ú–∞–∫—Å - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ñ–∞—É–Ω–¥–µ—Ä—ã, –∞ –Ω–∞—Å—Ç–æ—è—â–∏–µ –≤–∏–∑–∏–æ–Ω–µ—Ä—ã —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ, —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –∏ –∫—Ä–∏–ø—Ç–µ.\n\n–ù–æ –∏–º –Ω–µ –Ω—É–∂–Ω—ã –Ω–µ–ª–µ–ø—ã–µ –∑–≤–∞–Ω–∏—è –∏ —Ç–∏—Ç—É–ª—ã, —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å —Ç–≤–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ. \n\n–û–Ω–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –∑–Ω–∞–µ—Ç, –∫–∞–∫ —Ä–∞–∑–æ–≥–Ω–∞—Ç—å –∞–∫—Ç–∏–≤ –¥–æ $1 —è—Ä–¥–∞ –∫–∞–ø—ã!"
    },
    {
        "id": 9,
        "title": "–í–æ–ø—Ä–æ—Å #5: –ö–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ñ–∞—É–Ω–¥–µ—Ä—ã $B1COIN?",
        "description": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.",
        "options": ["A)–ü–æ–∫—É–ø–∞—é—Ç –¥–æ—Ä–æ–≥–∏–µ –º–∞—à–∏–Ω—ã –∏ –¥–æ–º–∞, –∑–∞–±—ã–≤–∞—è –æ –ø—Ä–æ–µ–∫—Ç–µ.\n", "B)–ó–∞–∫—Ä—ã–≤–∞—é—Ç –ø—Ä–æ–µ–∫—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞.\n", "C)–°–æ–∑–¥–∞—é—Ç –Ω–∞—Ä—Ä–∞—Ç–∏–≤ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω—ã –Ω–∞ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–º —Ä–æ—Å—Ç–µ –º–µ–º–∞.\n"],
        "optionss": ["A", "B", "C"],
        "correct_option": 2,
        "reward": 50,
        "correct_text":"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n–ú—ã –±—ã–ª–∏ –±—ã –∏ —Ä–∞–¥—ã —Å–º–æ—Ç–∞—Ç—å—Å—è —Å –¥–µ–Ω—å–≥–∞–º–∏ –ø–æ—Å–ª–µ –ø—Ä–µ—Å–µ–π–ª–∞, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –∑–Ω–∞–µ–º, –∫–∞–∫ –∏—Ö –æ—Ç–º—ã—Ç—å... \n\n–ü–æ—ç—Ç–æ–º—É –ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è... –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—Å–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏, –æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞—Ç—å –ª–∞–º–±—É üòé",
        "incorrect_text":"–ù—É... –ü–æ—á—Ç–∏...\n\n–ú—ã –±—ã–ª–∏ –±—ã –∏ —Ä–∞–¥—ã —Å–º–æ—Ç–∞—Ç—å—Å—è —Å –¥–µ–Ω—å–≥–∞–º–∏ –ø–æ—Å–ª–µ –ø—Ä–µ—Å–µ–π–ª–∞, –Ω–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –∑–Ω–∞–µ–º, –∫–∞–∫ –∏—Ö –æ—Ç–º—ã—Ç—å... \n\n–ü–æ—ç—Ç–æ–º—É –ø—Ä–∏–¥–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è... –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—Å–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏, –æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞—Ç—å –ª–∞–º–±—É üòé"
    },
    {
        "id": 10,
        "title": "–í–æ–ø—Ä–æ—Å #6: –ö–∞–∫ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à Lamborghini?",
        "description": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.",
        "options": ["A)–†–µ–≥—É–ª—è—Ä–Ω–æ –¥–µ–ª–∞—è —Å–µ–ª—Ñ–∏ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º $B1COIN.\n", "B)–£—á–∞—Å—Ç–≤—É—è –≤ –≥–æ–Ω–∫–∞—Ö –Ω–∞ –∏–≥—Ä—É—à–µ—á–Ω—ã—Ö –º–∞—à–∏–Ω–∫–∞—Ö.\n", "C)–î–æ–ª—å—à–µ —Ö–æ–ª–¥—è $B1COIN. STRONG HODL!\n"],
        "optionss": ["A", "B", "C"],
        "correct_option": 2,
        "reward": 50,
        "correct_text":"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n–ö—Ç–æ –±—ã –Ω–µ –º–µ—á—Ç–∞–ª –æ —à–∏–∫–∞—Ä–Ω–æ–π –º–∞—à–∏–Ω–µ? –ú—ã –¥–∞–µ–º –∫–∞–∂–¥–æ–º—É —Ö–æ–ª–¥–µ—Ä—É $B1COIN —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é Lamborghini!\n\n–ü–æ—ç—Ç–æ–º—É –¥–µ—Ä–∂–∏ —Ç–æ–∫–µ–Ω—ã, –ø–æ–ª—É—á–∞–π –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –±–∏–ª–µ—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ß–µ–º –±–æ–ª—å—à–µ –±–∏–ª–µ—Ç–æ–≤ - —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à!",
        "incorrect_text":"ü§ó –í–∞—Ä–∏–∞–Ω—Ç, –∫–æ–Ω–µ—á–Ω–æ, –Ω–µ–ø–ª–æ—Ö–æ–π.. –Ω–æ —Ç–µ–º –Ω–µ –º–µ–Ω–µ–µ \n\n–ö—Ç–æ –±—ã –Ω–µ –º–µ—á—Ç–∞–ª –æ —à–∏–∫–∞—Ä–Ω–æ–π –º–∞—à–∏–Ω–µ? –ú—ã –¥–∞–µ–º –∫–∞–∂–¥–æ–º—É —Ö–æ–ª–¥–µ—Ä—É $B1COIN —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é Lamborghini!\n\n–ü–æ—ç—Ç–æ–º—É –¥–µ—Ä–∂–∏ —Ç–æ–∫–µ–Ω—ã, –ø–æ–ª—É—á–∞–π –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –±–∏–ª–µ—Ç—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –ß–µ–º –±–æ–ª—å—à–µ –±–∏–ª–µ—Ç–æ–≤ - —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à!"
    },
    {
        "id": 11,
        "title": "–í–æ–ø—Ä–æ—Å #7: –ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã —É $B1COIN –Ω–∞ –±—É–¥—É—â–µ–µ?",
        "description": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.",
        "options": ["A)–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∫.\n", "B)–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏ –∑–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ TON.\n", "C)–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –µ–∂–µ–≥–æ–¥–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø–æ –±–µ–≥—É.\n"],
        "optionss": ["A", "B", "C"],
        "correct_option": 1,
        "reward": 50,
        "correct_text":"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!\n\n–ò –Ω–∏–∫—Ç–æ —ç—Ç–æ–º—É –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç!\n\n–ö–æ–º–∞–Ω–¥–∞ –º–µ–º–∞ $B1COIN –∏–º–µ–µ—Ç –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ, –≤–∫–ª—é—á–∞—è –∑–∞–ø—É—Å–∫ –∫—Ä—É—Ç–µ–π—à–µ–π NFT-–∫–æ–ª–ª–µ–∫—Ü–∏–∏, Lam‚Çøa game –∏ –≥—ç–º–±–ª–∏–Ω–≥-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã $B1COIN CASINO.\n\n–ù–æ –¥–∞–∂–µ –Ω–µ —Å–º–æ—Ç—Ä—è –Ω–∞ —ç—Ç–æ –≤—Å–µ... wen lam‚Çøa, sir?",
        "incorrect_text":"–ü–æ—á—Ç–∏ –≤–µ—Ä–Ω–æ!\n\n–ö–æ–º–∞–Ω–¥–∞ –º–µ–º–∞ $B1COIN –∏–º–µ–µ—Ç –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–µ –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ, –≤–∫–ª—é—á–∞—è –∑–∞–ø—É—Å–∫ –∫—Ä—É—Ç–µ–π—à–µ–π NFT-–∫–æ–ª–ª–µ–∫—Ü–∏–∏, Lam‚Çøa game –∏ –≥—ç–º–±–ª–∏–Ω–≥-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã $B1COIN CASINO.\n\n–ù–æ –¥–∞–∂–µ –Ω–µ —Å–º–æ—Ç—Ä—è –Ω–∞ —ç—Ç–æ –≤—Å–µ... wen lam‚Çøa, sir?"
    },
    {
        "id": 12,
        "title": "–ó–∞–¥–∞–Ω–∏–µ #5/15: –°–¥–µ–ª–∞—Ç—å —Ä–µ–ø–æ—Å—Ç –≤ Twitter (X) $B1COIN.",
        "description": f"–ß—Ç–æ —Ä–µ–ø–æ—Å—Ç–∏—Ç—å:\n\n{latest_tweet}\n\n–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π —Ä–µ–ø–æ—Å—Ç –≤ Twitter (X) –æ—Ç–≤–µ—Ç–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
        "reward": 300,
        "type": "twitter",
        "link": f"{latest_tweet}"
    },
    {
        "id": 13,
        "title": "–ó–∞–¥–∞–Ω–∏–µ #6/15: –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â–µ –æ—Ç 5 –¥—Ä—É–∑–µ–π.",
        "description": "–¢–≤–æ–∏ –¥—Ä—É–∑—å—è —Å—Ç–∞–Ω—É—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏.\n\n–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞",
        "reward": 200,
        "referral": True
    },
    {
        "id": 14,
        "title": "–ó–∞–¥–∞–Ω–∏–µ #7/15: –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ 3 –∫—Ä–∞–π–Ω–∏–º –ø–æ—Å—Ç–∞–º.",
        "description": "–í —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–º Telegram-–∫–∞–Ω–∞–ª–µ —Ç–æ–∫–µ–Ω–∞ $B1COIN:\n@b1coin_ton_ru",
        "reward": 150,
        "type": "comments",
        "channel": "@b1coin_ton_ru"
    },
    {
        "id": 15,
        "title": "–ó–∞–¥–∞–Ω–∏–µ #8/15: –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ 3 –∫—Ä–∞–π–Ω–∏–º –ø–æ—Å—Ç–∞–º.",
        "description": "–í –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω–æ–º Telegram-–∫–∞–Ω–∞–ª–µ —Ç–æ–∫–µ–Ω–∞ $B1COIN:\n@b1coin_ton",
        "reward": 150,
        "type": "comments",
        "channel": "@b1coin_ton"
    },
    {
        "id": 16,
        "title": "–ó–∞–¥–∞–Ω–∏–µ #9/15: –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ 3 –∫—Ä–∞–π–Ω–∏–º –ø–æ—Å—Ç–∞–º.",
        "description": "–í Telegram-–∫–∞–Ω–∞–ª–µ –∫—Ä–∏–ø—Ç–æ–ø–æ–¥–∫–∞—Å—Ç–∞ ‚ÄúTT –ö—Ä–∏–ø—Ç–æ: Trading Talks‚Äù:\n@tradingtalkscrypto",
        "reward": 150,
        "type": "comments",
        "channel": "@tradingtalkscrypto"
    },
    {
        "id": 17,
        "title": "–ó–∞–¥–∞–Ω–∏–µ #10/15: –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ 3 –∫—Ä–∞–π–Ω–∏–º –ø–æ—Å—Ç–∞–º.",
        "description": "–í Instagram-–∞–∫–∫–∞—É–Ω—Ç–µ —Ç–æ–∫–µ–Ω–∞ $B1COIN:\n...\n[3 —Å—Å—ã–ª–∫–∏]\n3 —Å—Å—ã–ª–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–∞\n–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ 1 —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏ –≤ 9:00",
        "reward": 250,
        "type": "comments",
        "platform": "Instagram"
    }
]
async def is_admin(user_id):
    cursor.execute("SELECT 1 FROM admins WHERE user_id = %s", (user_id,))
    return cursor.fetchone() is not None




language_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="RU", callback_data="lang_ru"),
        InlineKeyboardButton(text="ENG", callback_data="lang_eng")
    ]
])


channels = settings['channels']


check_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data="start_check")
    ]
])
ref_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π ü´Ç", callback_data="ref_b")
    ]
])
menu2_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–ó–∞–¥–∞–Ω–∏—è üéÆ", callback_data="quest"),
        InlineKeyboardButton(text="–ë–∞–ª–∞–Ω—Å üí≥", callback_data="balance")
    ],
    [
        InlineKeyboardButton(text="Lamba üèéÔ∏è", callback_data="lamba"),
        InlineKeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥ üî•", callback_data="top")
    ],
    [
        InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•", callback_data="ref_b"),
        InlineKeyboardButton(text="QR ü™ß", callback_data="qrcode")
    ]
])
user_panel_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–∞–¥–∞–Ω–∏—è üéÆ"),
         KeyboardButton(text="–ë–∞–ª–∞–Ω—Å üí≥")
        ],
        [
         KeyboardButton(text="Lamba üèéÔ∏è"),
         KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥ üî•")
        ],
        [
         KeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•"),
         KeyboardButton(text="QR ü™ß")
        ]
    ],
    resize_keyboard=True
)
async def get_user(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id = %s", (user_id,))
    return cursor.fetchone()
async def update_user_task(user_id, task_id):
    cursor.execute("UPDATE users SET current_task = %s WHERE user_id = %s", (task_id, user_id))
    conn.commit()


@dp.message(lambda message: message.text == "–†–µ–π—Ç–∏–Ω–≥ üî•")
async def show_leaderboard_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    cursor.execute("SELECT user_id, balance FROM users ORDER BY balance DESC, user_id ASC LIMIT 10")
    top_users = cursor.fetchall()

    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]

    cursor.execute("SELECT user_id, balance FROM users ORDER BY balance DESC, user_id ASC LIMIT 1 OFFSET %s", (total_users - 1,))
    last_user = cursor.fetchone()

    cursor.execute("SELECT balance FROM users WHERE user_id = %s", (user_id,))
    user_balance = cursor.fetchone()[0]

    user_position = "..."
    user_rank = None
    for index, (top_user_id, _) in enumerate(top_users):
        if top_user_id == user_id:
            user_rank = index + 1
            user_position = f"<b>–¢–´ {user_rank}. id: {user_id}, –ë–∞–ª–ª—ã: {user_balance} $B1COIN.</b>"

    if user_position == "...":
        cursor.execute("SELECT COUNT(*) FROM users WHERE balance > %s", (user_balance,))
        user_rank = cursor.fetchone()[0] + 1
        user_position = f"<b>–¢–´ {user_rank}. id: {user_id}, –ë–∞–ª–ª—ã: {user_balance} $B1COIN.</b>"

    leaderboard_text = "–†–µ–π—Ç–∏–Ω–≥:\n\n"
    for rank, (top_user_id, balance) in enumerate(top_users, start=1):
        if top_user_id == user_id:
            leaderboard_text += f"<b>–¢–´ {rank}. id: {top_user_id}, –ë–∞–ª–ª—ã: {balance} $B1COIN.</b>\n"
        else:
            leaderboard_text += f"{rank}. id: {top_user_id}, –ë–∞–ª–ª—ã: {balance} $B1COIN.\n"

    leaderboard_text += f"\n{user_position}\n{total_users}. id: {last_user[0]}, –ë–∞–ª–ª—ã: {last_user[1]} $B1COIN.\n"

    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")],
        [InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•", callback_data="ref_b")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞–Ω–∏—è üéÆ", callback_data="quest")]
    ])

    await bot.send_message(message.from_user.id, leaderboard_text, reply_markup=menu_keyboard, parse_mode = "HTML")
@dp.callback_query(lambda c: c.data == "top")
async def show_leaderboard(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    cursor.execute("SELECT user_id, balance FROM users ORDER BY balance DESC, user_id ASC LIMIT 10")
    top_users = cursor.fetchall()

    cursor.execute("SELECT COUNT(*) FROM users")
    total_users = cursor.fetchone()[0]

    cursor.execute("SELECT user_id, balance FROM users ORDER BY balance DESC, user_id ASC LIMIT 1 OFFSET %s", (total_users - 1,))
    last_user = cursor.fetchone()

    cursor.execute("SELECT balance FROM users WHERE user_id = %s", (user_id,))
    user_balance = cursor.fetchone()[0]

    user_position = "..."
    user_rank = None
    for index, (top_user_id, _) in enumerate(top_users):
        if top_user_id == user_id:
            user_rank = index + 1
            user_position = f"<b>–¢–´ {user_rank}. id: {user_id}, –ë–∞–ª–ª—ã: {user_balance} $B1COIN.</b>"

    if user_position == "...":
        cursor.execute("SELECT COUNT(*) FROM users WHERE balance > %s", (user_balance,))
        user_rank = cursor.fetchone()[0] + 1
        user_position = f"{user_rank}. id: {user_id}"

    leaderboard_text = "–†–µ–π—Ç–∏–Ω–≥:\n\n"
    for rank, (top_user_id, balance) in enumerate(top_users, start=1):
        if top_user_id == user_id:
            leaderboard_text += f"<b>–¢–´ {rank}. id: {top_user_id}, –ë–∞–ª–ª—ã: {balance} $B1COIN.</b>\n"
        else:
            leaderboard_text += f"{rank}. id: {top_user_id}, –ë–∞–ª–ª—ã: {balance} $B1COIN.\n"

    leaderboard_text += f"\n{user_position}\n{total_users}. id: {last_user[0]}, –ë–∞–ª–ª—ã: {last_user[1]} $B1COIN.\n"

    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")],
        [InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•", callback_data="ref_b")],
        [InlineKeyboardButton(text="–ó–∞–¥–∞–Ω–∏—è üéÆ", callback_data="quest")]
    ])

    await bot.send_message(callback_query.from_user.id, leaderboard_text, reply_markup=menu_keyboard, parse_mode = "HTML")
    await callback_query.answer()

async def update_tweet(tweet_link):
    cursor.execute("UPDATE tweet SET tweet_link = %s WHERE user_id = 0", (tweet_link))
async def check_subscriptions(user_id: int):
    for channel in channels:
        try:
            member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if member.status not in ['member', 'administrator', 'creator']:
                return False
        except TelegramBadRequest as e:
            if 'user not found' in str(e):
                return False
            raise e
    return True
async def check_subscriptions2(user_id: int):
    try:
        member = await bot.get_chat_member(chat_id="@tradingtalkscrypto", user_id=user_id)
        if member.status not in ['member', 'administrator', 'creator']:
            return False
    except TelegramBadRequest as e:
        if 'user not found' in str(e):
            return False
        raise e
    return True


@dp.callback_query(F.data == 'terms')
async def handle_terms(callback_query: types.CallbackQuery):
    global ref_bonus
    user_id = callback_query.from_user.id
    user = await get_user(user_id)
    ref_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π ü´Ç", callback_data="ref_b")
        ]
    ])
    ref_link = user[2] 

    terms_text = (
        "üìã –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è –≤ AIRDROP –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–∏ –µ—â–µ —Ç–∞–∫–∏–º–∏ –ø—Ä–æ—Å—Ç—ã–º–∏. –ê–±—Å–æ–ª—é—Ç–Ω–æ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç $B1COIN üî•\n\n"
        "–ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
        "1. –ë—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n"
        "@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n"
        "@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n"
        "@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n"
        "2. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π.\n\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å {ref_bonus} $B1COIN.\n\n"
        "–ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å, –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –≤–æ –≤–∫–ª–∞–¥–∫–µ '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ' –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π!\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–≤–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:\n{ref_link}\n\n"
    )
    photo = FSInputFile("images/13.jpg")
    await bot.send_photo(user_id, photo, caption=terms_text,reply_markup = ref_keyboard)
    await callback_query.answer()
async def send_reminder(user_id):
    photo = FSInputFile("images/2.jpg")
    await bot.send_photo(user_id, photo, caption="ü§î –í–∏–¥–∏–º–æ –∫–æ–≥–æ-—Ç–æ –æ—Ç–≤–ª–µ–∫–ª–∏...\n\n"
                                   "–ü–æ–¥–ø–∏—à–∏—Å—å –≤—Å–µ–≥–æ –Ω–∞ 3 —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∫–∞–Ω–∞–ª–∞ –∏ —É—á–∞—Å—Ç–≤—É–π –≤ —â–µ–¥—Ä–æ–º AIRDROP!\n\n"
                                   "–ö—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç, —Ç–æ—Ç —á–µ–±—É—Ä–∞—à–∫–∞... üëπ\n\n"
                                   "–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ —É—á–∞—Å—Ç–≤—É–π –≤ —Ä–∞–∑–¥–∞—á–µ –¥–µ–Ω–µ–≥:\n"
                                   "@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n"
                                   "@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n"
                                   "@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞", parse_mode='HTML',reply_markup = check_keyboard)

async def schedule_reminder(user_id):
    await asyncio.sleep(600)  
    await send_reminder(user_id)
class BroadcastStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_image = State()
    waiting_for_url_buttons = State()
    ready_to_broadcast = State()
admin_panel_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å")]
    ],
    resize_keyboard=True
)

@dp.callback_query(lambda c: c.data == "rating")
async def show_rating(callback_query: types.CallbackQuery):
    cursor.execute("SELECT user_id, balance FROM users ORDER BY balance DESC")
    users = cursor.fetchall()

    total_users = len(users)

    rating_text = "–†–µ–π—Ç–∏–Ω–≥:\n\n"
    top_users = users[:10]

    for i, (uid, balance) in enumerate(top_users, start=1):
        rating_text += f"{i}. ID: {uid}, –ë–∞–ª–ª—ã: {balance}\n"



    if total_users > 0:
        last_user = users[-1]
        rating_text += f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ (id: {last_user[0]})"

    rating_text += f"\n\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}"
    photo = FSInputFile("images/16.jpg")
    await bot.send_photo(callback_query.from_user.id, photo, caption=rating_text)

    await callback_query.answer()
@dp.message(lambda message: message.text == "–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å")

async def admin_panel(message: types.Message):
    if await is_admin(message.from_user.id):
        await message.reply("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å—Ç", callback_data="post")],
            [InlineKeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥", callback_data="rating")],
            [InlineKeyboardButton(text="–ë–∞–ª–ª—ã", callback_data="points")],
            [InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É", callback_data="export")]
        ]))
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
class AdminStates(StatesGroup):
    waiting_for_points = State()
@dp.callback_query(lambda c: c.data in ["post", "rating", "points", "export"])
async def handle_admin_actions(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data
    if action == "post":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        await state.set_state(BroadcastStates.waiting_for_message)
    elif action == "rating":
        await bot.send_message(callback_query.from_user.id, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥.")
    elif action == "points":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (—á–∏—Å–ª–æ):")
        await state.set_state(AdminStates.waiting_for_points)
    elif action == "export":
        await export_user_data(callback_query.from_user.id)

    await callback_query.answer()
async def export_user_data(user_id):
    cursor.execute('SELECT user_id, wallet, balance FROM users')
    users_data = cursor.fetchall()

    data = [{'‚Ññ': i + 1, '–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞': row[1], '–°—É–º–º–∞ –±–∞–ª–ª–æ–≤': row[2]} for i, row in enumerate(users_data)]
    df = pd.DataFrame(data)
    excel_path = 'users_data.xlsx'
    df.to_excel(excel_path, index=False)

    await bot.send_document(user_id, types.FSInputFile(excel_path))
@dp.message(AdminStates.waiting_for_points)
async def set_ref_bonus(message: types.Message, state: FSMContext):
    global ref_bonus
    try:
        new_ref_bonus = int(message.text)
        ref_bonus = new_ref_bonus
        await message.reply(f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–Ω—É—Å–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {ref_bonus}")
        await state.clear()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
@dp.message(BroadcastStates.waiting_for_message)
async def set_broadcast_message(message: types.Message, state: FSMContext):
    await state.update_data(broadcast_message=message.text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview")],
        [InlineKeyboardButton(text = "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="add_image")],
        [InlineKeyboardButton(text = "–î–æ–±–∞–≤–∏—Ç—å URL-–∫–Ω–æ–ø–∫—É", callback_data="add_url_button")],
        [InlineKeyboardButton(text = "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")],
        [InlineKeyboardButton(text = "–£–¥–∞–ª–∏—Ç—å", callback_data="delete")]
    ])
    await message.reply("–í—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?", reply_markup=keyboard)
    await state.set_state(BroadcastStates.ready_to_broadcast)

@dp.callback_query(lambda c: c.data == "add_image", BroadcastStates.ready_to_broadcast)
async def ask_for_image(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª (–¥–æ 5 –ú–±)")
    await state.set_state(BroadcastStates.waiting_for_image)
    await callback_query.answer()

@dp.message(BroadcastStates.waiting_for_image, F.content_type.in_({'photo'}))
async def set_broadcast_image(message: types.Message, state: FSMContext):
    file_id = message.photo[-1].file_id
    await state.update_data(broadcast_image=file_id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview")],
        [InlineKeyboardButton(text = "–î–æ–±–∞–≤–∏—Ç—å URL-–∫–Ω–æ–ø–∫—É", callback_data="add_url_button")],
        [InlineKeyboardButton(text = "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")],
        [InlineKeyboardButton(text = "–£–¥–∞–ª–∏—Ç—å", callback_data="delete")]
    ])
    await message.reply("–ú–µ–¥–∏–∞—Ñ–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.", reply_markup=keyboard)
    await state.set_state(BroadcastStates.ready_to_broadcast)

@dp.callback_query(lambda c: c.data == "add_url_button", BroadcastStates.ready_to_broadcast)
async def ask_for_url_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ø–∏—Å–æ–∫ URL-–∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É:\n\n–ö–Ω–æ–ø–∫–∞ 1 - http://example1.com\n–ö–Ω–æ–ø–∫–∞ 2 - http://example2.com")
    await state.set_state(BroadcastStates.waiting_for_url_buttons)
    await callback_query.answer()

@dp.message(BroadcastStates.waiting_for_url_buttons)
async def set_broadcast_url_buttons(message: types.Message, state: FSMContext):
    url_buttons = []
    lines = message.text.split('\n')
    for line in lines:
        parts = line.split(' - ')
        if len(parts) == 2:
            url_buttons.append(InlineKeyboardButton(text=parts[0], url=parts[1]))

    await state.update_data(broadcast_url_buttons=url_buttons)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text = "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview")],
        [InlineKeyboardButton(text = "–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")],
        [InlineKeyboardButton(text = "–£–¥–∞–ª–∏—Ç—å", callback_data="delete")]
    ])
    await message.reply("URL-–∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.", reply_markup=keyboard)
    await state.set_state(BroadcastStates.ready_to_broadcast)

@dp.callback_query(lambda c: c.data == "preview", BroadcastStates.ready_to_broadcast)
async def preview_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    broadcast_message = data['broadcast_message']
    broadcast_image = data.get('broadcast_image')
    broadcast_url_buttons = data.get('broadcast_url_buttons')

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_broadcast")]
    ])
    if broadcast_url_buttons:
        keyboard.inline_keyboard.extend([button] for button in broadcast_url_buttons)

    if broadcast_image:
        await bot.send_photo(callback_query.from_user.id, broadcast_image, caption=broadcast_message, reply_markup=keyboard)
    else:
        await bot.send_message(callback_query.from_user.id, broadcast_message, reply_markup=keyboard)

    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "publish", BroadcastStates.ready_to_broadcast)
async def confirm_publish(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text = "–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send_broadcast")],
        [InlineKeyboardButton(text = "–£–¥–∞–ª–∏—Ç—å", callback_data="delete")]
    ])
    await bot.send_message(callback_query.from_user.id, "–ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ? –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'", reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "delete", BroadcastStates.ready_to_broadcast)
async def delete_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await bot.send_message(callback_query.from_user.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_panel_keyboard)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "send_broadcast", BroadcastStates.ready_to_broadcast)
async def send_broadcast(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    broadcast_message = data['broadcast_message']
    broadcast_image = data.get('broadcast_image')
    broadcast_url_buttons = data.get('broadcast_url_buttons')

    cursor.execute("SELECT user_id FROM users")
    user_ids = cursor.fetchall()

    keyboard = None
    if broadcast_url_buttons:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[button] for button in broadcast_url_buttons]
        )

    for user_id_tuple in user_ids:
        user_id = user_id_tuple[0]
        try:
            if broadcast_image:
                await bot.send_photo(user_id, broadcast_image, caption=broadcast_message, reply_markup=keyboard)
            else:
                await bot.send_message(user_id, broadcast_message, reply_markup=keyboard)
        except Exception as e:
            print(f"Error sending message to user {user_id}: {e}")
    await bot.send_message(callback_query.from_user.id, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.clear()
    await callback_query.answer()



async def start_reminder_task(user_id):
    if user_id in reminder_tasks:
        reminder_tasks[user_id].cancel()
    
    reminder_tasks[user_id] = asyncio.create_task(schedule_reminder(user_id))
@dp.message(Command('start'))
async def send_welcome(message: types.Message):
    global ref_bonus
    referrer_id = None
    args = message.text.split()
    if len(args) > 1:
        try:
            referrer_id = int(args[1])
        except ValueError:
            pass

    user_id = message.from_user.id
    
    user = await get_user(user_id)
    is_user_admin = await is_admin(user_id)
    if is_user_admin:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞–¥–∞–Ω–∏—è üéÆ"),
                 KeyboardButton(text="–ë–∞–ª–∞–Ω—Å üí≥")
                ],
                [
                KeyboardButton(text="Lamba üèéÔ∏è"),
                KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥ üî•")
                ],
                [
                KeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•"),
                KeyboardButton(text="QR ü™ß")
                ],
                [KeyboardButton(text="–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å")]
            ],
            resize_keyboard=True
        )
    else:
        keyboard = ReplyKeyboardMarkup(keyboard=[
                    [KeyboardButton(text="–ó–∞–¥–∞–Ω–∏—è üéÆ"),
                    KeyboardButton(text="–ë–∞–ª–∞–Ω—Å üí≥")
                    ],
                    [
                    KeyboardButton(text="Lamba üèéÔ∏è"),
                    KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥ üî•")
                    ],
                    [
                    KeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•"),
                    KeyboardButton(text="QR ü™ß")
                    ]
                ],
                resize_keyboard=True)

    if not user:
        print(f"referrer_id: {referrer_id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å
        ref_link = f"https://t.me/b1coin_bot?start={user_id}"
        cursor.execute(
            'INSERT INTO users (user_id, lang, ref_link, balance, ref_count, referrer_id, bonus_taked) VALUES (%s, %s, %s, %s, %s, %s, %s)',
            (user_id, None, ref_link, 0, 0, referrer_id, 0)
        )
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        cursor.execute('SELECT referrer_id FROM users WHERE user_id = %s', (user_id,))
        result = cursor.fetchone()
        print(f"Inserted referrer_id: {result[0]}")  
        if referrer_id and referrer_id != user_id and await check_subscriptions(user_id) :
            cursor.execute('UPDATE users SET balance = balance + %s, ref_count = ref_count + 1 WHERE user_id = %s', (ref_bonus, referrer_id,))
            conn.commit()
            cursor.execute('UPDATE users SET balance = 50 WHERE user_id = %s', (user_id,))
            conn.commit()
            cursor.execute('SELECT balance, ref_count FROM users WHERE user_id = %s', (referrer_id,))
            referrer_data = cursor.fetchone()
            await bot.send_message(referrer_id, f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {ref_bonus} $B1COIN –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        await message.reply("Select your language:", reply_markup=language_keyboard)
    else:
        lang = user[1]
        ref_link = user[2]
        if lang == 'ru':
            if await check_subscriptions(user_id):
                photo_path = 'start_image.jpg'
                photo = FSInputFile(photo_path)
                await bot.send_photo(user_id, photo, caption="üéä –¢–û–ü–û–í–´–ô AIRDROP $B1COIN \n\n–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã $B1COIN –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞! –°–∞–º—ã–µ –ª—É—á—à–∏–µ –∏ —á–µ—Å—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è!\n–ê–±—Å–æ–ª—é—Ç–Ω–æ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç DROP –æ—Ç $B1COIN.\n\nüéâ –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≥–ª–∞—Å–∏ —Ö–æ—Ç—è –±—ã 1 –¥—Ä—É–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ:", reply_markup=ref_keyboard)
            else:
                photo = FSInputFile("images/1.jpg")
                await bot.send_photo(user_id, photo, caption=settings['start_message'], reply_markup=keyboard)
                await bot.send_message(message.chat.id, f"ü§ù –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ–ø–æ–≤–æ–º AIRDROP, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n\n–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}", reply_markup=check_keyboard)
        else:
            if await check_subscriptions(user_id):
                photo_path = 'start_image.jpg'
                photo = FSInputFile(photo_path)
                await bot.send_photo(user_id, photo, caption="üéä –¢–û–ü–û–í–´–ô AIRDROP $B1COIN \n\n–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã $B1COIN –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞! –°–∞–º—ã–µ –ª—É—á—à–∏–µ –∏ —á–µ—Å—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è!\n–ê–±—Å–æ–ª—é—Ç–Ω–æ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç DROP –æ—Ç $B1COIN.\n\nüéâ –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≥–ª–∞—Å–∏ —Ö–æ—Ç—è –±—ã 1 –¥—Ä—É–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ:", reply_markup=ref_keyboard)
            else:
                photo = FSInputFile("images/1.jpg")
                await bot.send_photo(user_id, photo, caption=settings['start_message'], reply_markup=keyboard)
                await bot.send_message(message.chat.id, f"ü§ù –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ–ø–æ–≤–æ–º AIRDROP, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n\n–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}", reply_markup=check_keyboard)
        await start_reminder_task(user_id)
def is_quiz_completed(task_id):
    quiz_task_ids = [task['id'] for task in tasks if 'options' in task]
    return task_id == max(quiz_task_ids)
@dp.callback_query(F.data == 'lang_ru')
async def process_language_selection_ru(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    ref_link = f"https://t.me/b1coin_bot?start={user_id}"
    cursor.execute('REPLACE INTO users (user_id, lang, ref_link) VALUES (%s, %s, %s)', (user_id, 'ru', ref_link))
    conn.commit()
    
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.message.reply(settings['start_message'])
    await bot.send_message(callback_query.message.chat.id, f"ü§ù –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ–ø–æ–≤–æ–º AIRDROP, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n\n–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}", reply_markup=check_keyboard)
    await callback_query.answer() 
    await start_reminder_task(user_id)

@dp.callback_query(F.data == 'lang_eng')
async def process_language_selection_eng(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    ref_link = f"https://t.me/b1coin_bot?start={user_id}"
    cursor.execute('REPLACE INTO users (user_id, lang, ref_link) VALUES (%s, %s, %s)', (user_id, 'ru', ref_link))
    conn.commit()
    
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.message.reply(settings['start_message'])
    await bot.send_message(callback_query.message.chat.id, f"ü§ù –ß—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–æ–ø–æ–≤–æ–º AIRDROP, —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n\n–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}", reply_markup=check_keyboard)
    await callback_query.answer() 
    await start_reminder_task(user_id)


@dp.callback_query(F.data == 'start_check')
async def check_subscriptions_callback(callback_query: types.CallbackQuery):
    photo_path = 'start_image.jpg'
    photo = FSInputFile(photo_path)
    user_id = callback_query.from_user.id
    cursor.execute('SELECT * FROM users WHERE user_id = %s', (user_id,))
    user = cursor.fetchone()
    referrerr_id =  user[7]
    bonus_taked = user[8]
    if user_id in reminder_tasks:
        reminder_tasks[user_id].cancel()
        del reminder_tasks[user_id]
    if referrerr_id and referrerr_id != user_id and bonus_taked == 0 and await check_subscriptions(user_id):
                cursor.execute('UPDATE users SET balance = balance + %s, ref_count = ref_count + 1 WHERE user_id = %s', (ref_bonus, referrerr_id,))
                conn.commit()
                cursor.execute('UPDATE users SET balance = 50 WHERE user_id = %s', (user_id,))
                conn.commit()
                cursor.execute('UPDATE users SET bonus_taked = 1 WHERE user_id = %s', (user_id,))
                conn.commit()
                cursor.execute('SELECT balance, ref_count FROM users WHERE user_id = %s', (referrerr_id,))
                referrer_data = cursor.fetchone()
                await bot.send_message(referrerr_id, f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {ref_bonus} $B1COIN –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                await bot.send_photo(user_id, photo, caption="üéä –¢–û–ü–û–í–´–ô AIRDROP $B1COIN \n\n–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã $B1COIN –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞! –°–∞–º—ã–µ –ª—É—á—à–∏–µ –∏ —á–µ—Å—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è!\n–ê–±—Å–æ–ª—é—Ç–Ω–æ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç DROP –æ—Ç $B1COIN.\n\nüéâ –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≥–ª–∞—Å–∏ —Ö–æ—Ç—è –±—ã 1 –¥—Ä—É–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ:", reply_markup=ref_keyboard)
    elif await check_subscriptions(user_id):
        await bot.send_photo(user_id, photo, caption="üéä –¢–û–ü–û–í–´–ô AIRDROP $B1COIN \n\n–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã $B1COIN –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞! –°–∞–º—ã–µ –ª—É—á—à–∏–µ –∏ —á–µ—Å—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è!\n–ê–±—Å–æ–ª—é—Ç–Ω–æ –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç DROP –æ—Ç $B1COIN.\n\nüéâ –ê —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–≥–ª–∞—Å–∏ —Ö–æ—Ç—è –±—ã 1 –¥—Ä—É–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ:", reply_markup=ref_keyboard)
    else:
        photo = FSInputFile("images/2.jpg")
        await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞", reply_markup=check_keyboard)    
    await callback_query.answer() 

@dp.message(lambda message: message.text == "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•")
async def ref_f_mmesage(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    ref_link = await get_user(user_id)
    if user_id in reminder_tasks:
        reminder_tasks[user_id].cancel()
        del reminder_tasks[user_id]
    text = (
        "–ü–æ–¥–∫–ª—é—á–∞–π—Å—è —Å–æ –º–Ω–æ–π –∫ —Ç–æ–ø–æ–≤–æ–º—É AIRDROP –Ω–∞ TON, –≤—ã–ø–æ–ª–Ω—è–π –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Ç–æ–∫–µ–Ω—ã $B1COIN!\n"
        "\n –°—Ä–µ–¥–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–µ–Ω—å–∫–∞—è Lamborghini...\n\n"
        " - wen lam‚Çøa, sir? üèéüí®!"
    )
    encoded_ref_link = urllib.parse.quote(ref_link[2], safe='')
    encoded_text = urllib.parse.quote(text, safe='')
    share_url = f"https://t.me/share/url?url={encoded_ref_link}&text={encoded_text}"
    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b"),
            InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=share_url)
        ]
    ])

    if await check_subscriptions(user_id):
        await bot.send_message(
                                    user_id,
                                    f"<b>{ref_link[2]}</b>\n\n"
                                    "–ü–æ–¥–∫–ª—é—á–∞–π—Å—è —Å–æ –º–Ω–æ–π –∫ —Ç–æ–ø–æ–≤–æ–º—É AIRDROP –Ω–∞ TON, –≤—ã–ø–æ–ª–Ω—è–π –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Ç–æ–∫–µ–Ω—ã $B1COIN!\n\n"
                                    "–°—Ä–µ–¥–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–µ–Ω—å–∫–∞—è <b>Lamborghini</b>...\n\n"
                                    "- wen lam‚Çøa, sir? üèéüí®",
                                    parse_mode='HTML',reply_markup =menu_keyboard
                                )
    else:
        photo = FSInputFile("images/2.jpg")
        await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞", reply_markup=check_keyboard)    

@dp.callback_query(F.data == 'ref_b')
async def ref_f(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    ref_link = await get_user(user_id)
    if user_id in reminder_tasks:
        reminder_tasks[user_id].cancel()
        del reminder_tasks[user_id]
    text = (
        "–ü–æ–¥–∫–ª—é—á–∞–π—Å—è —Å–æ –º–Ω–æ–π –∫ —Ç–æ–ø–æ–≤–æ–º—É AIRDROP –Ω–∞ TON, –≤—ã–ø–æ–ª–Ω—è–π –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Ç–æ–∫–µ–Ω—ã $B1COIN!\n"
        "\n –°—Ä–µ–¥–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–µ–Ω—å–∫–∞—è Lamborghini...\n\n"
        " - wen lam‚Çøa, sir? üèéüí®!"
    )
    encoded_ref_link = urllib.parse.quote(ref_link[2], safe='')
    encoded_text = urllib.parse.quote(text, safe='')
    share_url = f"https://t.me/share/url?url={encoded_ref_link}&text={encoded_text}"
    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b"),
            InlineKeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=share_url)
        ]
    ])

    if await check_subscriptions(user_id):
        await bot.send_message(
                                    user_id,
                                    f"<b>{ref_link[2]}</b>\n\n"
                                    "–ü–æ–¥–∫–ª—é—á–∞–π—Å—è —Å–æ –º–Ω–æ–π –∫ —Ç–æ–ø–æ–≤–æ–º—É AIRDROP –Ω–∞ TON, –≤—ã–ø–æ–ª–Ω—è–π –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Ç–æ–∫–µ–Ω—ã $B1COIN!\n\n"
                                    "–°—Ä–µ–¥–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤–µ–Ω—å–∫–∞—è <b>Lamborghini</b>...\n\n"
                                    "- wen lam‚Çøa, sir? üèéüí®",
                                    parse_mode='HTML',reply_markup =menu_keyboard
                                )
    else:
        photo = FSInputFile("images/2.jpg")
        await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞", reply_markup=check_keyboard)    
    await callback_query.answer() 

@dp.callback_query(F.data == 'menu_b')
async def ref_f(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    ref_link = await get_user(user_id)
    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")
        ]
    ])
    is_user_admin = await is_admin(user_id)
    if is_user_admin:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞–¥–∞–Ω–∏—è üéÆ"),
                 KeyboardButton(text="–ë–∞–ª–∞–Ω—Å üí≥")
                ],
                [
                KeyboardButton(text="Lamba üèéÔ∏è"),
                KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥ üî•")
                ],
                [
                KeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•"),
                KeyboardButton(text="QR ü™ß")
                ],
                [KeyboardButton(text="–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å")]
            ],
            resize_keyboard=True
        )
    else:
        keyboard = ReplyKeyboardMarkup(keyboard=[
                    [KeyboardButton(text="–ó–∞–¥–∞–Ω–∏—è üéÆ"),
                    KeyboardButton(text="–ë–∞–ª–∞–Ω—Å üí≥")
                    ],
                    [
                    KeyboardButton(text="Lamba üèéÔ∏è"),
                    KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥ üî•")
                    ],
                    [
                    KeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•"),
                    KeyboardButton(text="QR ü™ß")
                    ]
                ],
                resize_keyboard=True)
    if await check_subscriptions(user_id):
        photo = FSInputFile("images/3.jpg")
        await bot.send_photo(user_id, photo, caption=f"<strong>–ú–µ–Ω—é</strong>\n\n"
                                    "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å $B1COIN! üöÄ!\n\n",
                                    parse_mode='HTML',reply_markup=menu2_keyboard)
        await bot.send_message(user_id, "–ú–µ–Ω—é:", reply_markup=keyboard)  
    else:
        photo = FSInputFile("images/2.jpg")
        await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞", reply_markup=check_keyboard)    
    await callback_query.answer() 


@dp.message(lambda message: message.text == "Lamba üèéÔ∏è")
async def ref_f_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    ref_link = await get_user(user_id)
    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b"),
            InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•", callback_data="ref_b")
        ]
    ])

    if await check_subscriptions(user_id):
            await bot.send_message(
                user_id,
                "<strong>üèéÔ∏è –†–æ–∑—ã–≥—Ä—ã—à Lamborghini —Å—Ä–µ–¥–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤ $B1COIN!</strong>\n\n"
                "üîπ –†–æ–∑—ã–≥—Ä—ã—à –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å.\n\n"
                "üîπ –†–æ–∑—ã–≥—Ä—ã—à —Å–æ—Å—Ç–æ–∏—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –Ω–∞–±—Ä–∞–Ω–∞ —Å—É–º–º–∞, –∑–∞–ª–æ–∂–µ–Ω–Ω–∞—è –≤ –Ω–∞—à–µ–π —Ç–æ–∫–µ–Ω–æ–º–∏–∫–µ.\n\n"
                "üîπ –ß–µ–º –¥–æ–ª—å—à–µ –≤—ã —Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã $B1COIN, —Ç–µ–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –≤–∞—à —Å—á–µ—Ç –∏ —Ç–µ–º –≤—ã—à–µ –≤–∞—à–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É!\n\n"
                "–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
                "1. –•–æ–ª–¥–∏—Ç–µ $B1COIN –≤ —Å–≤–æ–µ–º –∫–æ—à–µ–ª—å–∫–µ.\n"
                "2. –ü–æ–ª—É—á–∞–π—Ç–µ —Ç–∏–∫–µ—Ç—ã –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ö—Ä–∞–Ω–µ–Ω–∏—è.\n"
                "3. –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ Lamborghini!\n\n"
                "–ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–∫–∞—Ü–∏–∏!\n"
                "–í–ø–µ—Ä–µ–¥, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å $B1COIN!",
                parse_mode='HTML',
                reply_markup=menu_keyboard
            )  
    else:
        photo = FSInputFile("images/2.jpg")
        await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞", reply_markup=check_keyboard)    
@dp.callback_query(F.data == 'lamba')
async def ref_f(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    ref_link = await get_user(user_id)
    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b"),
            InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•", callback_data="ref_b")
        ]
    ])

    if await check_subscriptions(user_id):
            await bot.send_message(
                user_id,
                "<strong>üèéÔ∏è –†–æ–∑—ã–≥—Ä—ã—à Lamborghini —Å—Ä–µ–¥–∏ —Ö–æ–ª–¥–µ—Ä–æ–≤ $B1COIN!</strong>\n\n"
                "üîπ –†–æ–∑—ã–≥—Ä—ã—à –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –±–ª–æ–∫—á–µ–π–Ω–µ, —á—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –ø–æ–ª–Ω—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ —á–µ—Å—Ç–Ω–æ—Å—Ç—å.\n\n"
                "üîπ –†–æ–∑—ã–≥—Ä—ã—à —Å–æ—Å—Ç–æ–∏—Ç—Å—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –Ω–∞–±—Ä–∞–Ω–∞ —Å—É–º–º–∞, –∑–∞–ª–æ–∂–µ–Ω–Ω–∞—è –≤ –Ω–∞—à–µ–π —Ç–æ–∫–µ–Ω–æ–º–∏–∫–µ.\n\n"
                "üîπ –ß–µ–º –¥–æ–ª—å—à–µ –≤—ã —Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã $B1COIN, —Ç–µ–º –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞ –≤–∞—à —Å—á–µ—Ç –∏ —Ç–µ–º –≤—ã—à–µ –≤–∞—à–∏ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É!\n\n"
                "–ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
                "1. –•–æ–ª–¥–∏—Ç–µ $B1COIN –≤ —Å–≤–æ–µ–º –∫–æ—à–µ–ª—å–∫–µ.\n"
                "2. –ü–æ–ª—É—á–∞–π—Ç–µ —Ç–∏–∫–µ—Ç—ã –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ö—Ä–∞–Ω–µ–Ω–∏—è.\n"
                "3. –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ –≤—ã–∏–≥—Ä–∞–π—Ç–µ Lamborghini!\n\n"
                "–ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–∫–∞—Ü–∏–∏!\n"
                "–í–ø–µ—Ä–µ–¥, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å $B1COIN!",
                parse_mode='HTML',
                reply_markup=menu_keyboard
            )  
    else:
        photo = FSInputFile("images/2.jpg")
        await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞", reply_markup=check_keyboard)    
    await callback_query.answer()

@dp.message(lambda message: message.text == "–ë–∞–ª–∞–Ω—Å üí≥")
async def balance_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await get_user(user_id)
    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–ö–æ—à–µ–ª–µ–∫ üí≥", callback_data="wallet"),
        InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")
    ],
    [
        InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è üìã", callback_data="terms")
    ]
    ])

    if await check_subscriptions(user_id):
            await bot.send_message(
                user_id,
                "–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n"
                f"{user[5]}\n\n"
                f"–ë–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤: {user[3]} $B1COIN.\n"
                f"–ë–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user[4]} ref.\n"
                "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞::\n"
                f"{user[2]}\n\n"
                "–ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å, –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –≤–æ –≤–∫–ª–∞–¥–∫–µ ‚Äú–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ‚Äù –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π!\n\n"
                "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º $B1COIN –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ AIRDROP –Ω–∞ –¥–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.\n\n"
                "–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –∞–¥—Ä–µ—Å–µ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —Å–º–µ–Ω–∏—Ç—å - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É ‚Äú–ö–æ—à–µ–ª–µ–∫‚Äù.\n",
                parse_mode='HTML',
                reply_markup=menu_keyboard
            )  
    else:
        photo = FSInputFile("images/2.jpg")
        await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞", reply_markup=check_keyboard)    

@dp.callback_query(F.data == 'balance')
async def ref_f(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = await get_user(user_id)
    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–ö–æ—à–µ–ª–µ–∫ üí≥", callback_data="wallet"),
        InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")
    ],
    [
        InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è üìã", callback_data="terms")
    ]
    ])

    if await check_subscriptions(user_id):
            await bot.send_message(
                user_id,
                "–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n\n"
                f"{user[5]}\n\n"
                f"–ë–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤: {user[3]} $B1COIN.\n"
                f"–ë–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user[4]} ref.\n"
                "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞::\n"
                f"{user[2]}\n\n"
                "–ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å, –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –≤–æ –≤–∫–ª–∞–¥–∫–µ ‚Äú–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ‚Äù –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π!\n\n"
                "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º $B1COIN –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ AIRDROP –Ω–∞ –¥–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.\n\n"
                "–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –∞–¥—Ä–µ—Å–µ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —Å–º–µ–Ω–∏—Ç—å - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É ‚Äú–ö–æ—à–µ–ª–µ–∫‚Äù.\n",
                parse_mode='HTML',
                reply_markup=menu_keyboard
            )  
    else:
        photo = FSInputFile("images/2.jpg")
        await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞", reply_markup=check_keyboard)    
    await callback_query.answer() 
@dp.callback_query(F.data == 'wallet')
async def handle_wallet(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user = await get_user(user_id)
    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–æ–º–µ–Ω—è—Ç—å ‚úÖ", callback_data="change_wallet"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ü™ß", callback_data="menu_b")
        ]
    ])

    if await check_subscriptions(user_id):
        if not user[5]:
            await bot.send_message(
                user_id,
                "üí≥ –¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å –ù–ï–∫–∞—Å—Ç–æ–¥–∏–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ —Å–µ—Ç–∏ TON - –Ω–∞–ø—Ä–∏–º–µ—Ä, Tonkeeper.\n\n"
                "–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ Tonkeeper:\n",
                parse_mode='HTML'
            )
            await state.set_state(WalletStates.waiting_for_wallet)
        else:
            await bot.send_message(
                user_id,
                f"üí≥ –ê–¥—Ä–µ—Å —Ç–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞:\n{user[5]}\n\n"
                "–•–æ—á–µ—à—å –µ–≥–æ –ø–æ–º–µ–Ω—è—Ç—å?",
                parse_mode='HTML',
                reply_markup=menu_keyboard
            )
    else:
        photo = FSInputFile("images/2.jpg")
        await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:\n@victor_moc - –∫–∞–Ω–∞–ª –í–∏–∫—Ç–æ—Ä–∞, 1 –∏–∑ —Ñ–∞—É–Ω–¥–µ—Ä–æ–≤\n@b1coin_ton_ru (RU) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞\n@b1coin_ton (EN) - –∫–∞–Ω–∞–ª —Ç–æ–∫–µ–Ω–∞", reply_markup=check_keyboard)    

    await callback_query.answer()
@dp.message(lambda message: message.text == "QR ü™ß")
async def handle_qrcode_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = await get_user(user_id)
    ref_link = user[2]

   
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=5,
        border=1,
    )
    qr.add_data(ref_link)
    qr.make(fit=True)

    qr_img = qr.make_image(fill_color="black", back_color="white").convert('RGB')


    base_img = Image.open('1080X1920.png')
    qr_img = qr_img.resize((800, 800))  

    position = ((base_img.width - qr_img.width) // 2, base_img.height - qr_img.height - 100)

    combined_img = Image.new('RGB', base_img.size)
    combined_img.paste(base_img, (0, 0))
    combined_img.paste(qr_img, position)


    final_img_path = 'final_image_with_qr.png'
    combined_img.save(final_img_path)

    photo = FSInputFile(final_img_path)
    await bot.send_photo(user_id, photo, caption="–í–æ—Ç –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π QR-–∫–æ–¥!")


@dp.message(lambda message: message.text == "–ó–∞–¥–∞–Ω–∏—è üéÆ")
async def handle_quest_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await send_next_task(user_id)
@dp.message(WalletStates.waiting_for_wallet)
async def handle_wallet_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    wallet_address = message.text.strip()
    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–ö–æ—à–µ–ª–µ–∫ üí≥", callback_data="wallet"),
        InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")
    ],
    [
        InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è üìã", callback_data="terms")
    ]
    ])
    cancel = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="cancell"),
    ]])
    if len(wallet_address) == 48:
        cursor.execute('UPDATE users SET wallet = %s WHERE user_id = %s', (wallet_address, user_id))
        conn.commit()
        user = await get_user(user_id)
        await bot.send_message(
            user_id,
            f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:\n{user[5]}\n\n"
            f"–ë–∞–ª–∞–Ω—Å –±–∞–ª–ª–æ–≤: {user[3]} $B1COIN.\n"
            f"–ë–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user[4]} ref.\n"
            "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
            f"{user[2]}\n\n"
            "–ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±–∞–ª–∞–Ω—Å, –≤—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –≤–æ –≤–∫–ª–∞–¥–∫–µ ‚Äú–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ‚Äù –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π!\n\n"
            "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º $B1COIN –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ AIRDROP –Ω–∞ –¥–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.\n\n"
            "–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å –≤ –∞–¥—Ä–µ—Å–µ –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —Å–º–µ–Ω–∏—Ç—å - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É ‚Äú–ö–æ—à–µ–ª–µ–∫‚Äù.\n",
            parse_mode='HTML',reply_markup=menu_keyboard
        )
        await state.clear()
    else:
        
        await bot.send_message(
            user_id,
            "üí≥ –ü—Ä–æ–≤–µ—Ä—å, –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å, 48 —Å–∏–º–≤–æ–ª–æ–≤. Memo/Tag –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.\n\n"
            "–ñ–¥—É –æ—Ç —Ç–µ–±—è —Ç–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å, –º–Ω–æ–≥–æ –±—É–∫–∞–≤!\n\n"
            "–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ Tonkeeper:\n",
            parse_mode='HTML',reply_markup = cancel
        )

@dp.callback_query(F.data == 'cancell')
async def handle_change_wallet(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    is_user_admin = await is_admin(user_id)
    if is_user_admin:
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ó–∞–¥–∞–Ω–∏—è üéÆ"),
                 KeyboardButton(text="–ë–∞–ª–∞–Ω—Å üí≥")
                ],
                [
                KeyboardButton(text="Lamba üèéÔ∏è"),
                KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥ üî•")
                ],
                [
                KeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•"),
                KeyboardButton(text="QR ü™ß")
                ],
                [KeyboardButton(text="–ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å")]
            ],
            resize_keyboard=True
        )
    else:
        keyboard = ReplyKeyboardMarkup(keyboard=[
                    [KeyboardButton(text="–ó–∞–¥–∞–Ω–∏—è üéÆ"),
                    KeyboardButton(text="–ë–∞–ª–∞–Ω—Å üí≥")
                    ],
                    [
                    KeyboardButton(text="Lamba üèéÔ∏è"),
                    KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥ üî•")
                    ],
                    [
                    KeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•"),
                    KeyboardButton(text="QR ü™ß")
                    ]
                ],
                resize_keyboard=True)
    await state.clear()
    await bot.send_message(
            user_id,
            "–ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå",
            parse_mode='HTML',reply_markup = keyboard
        )    
@dp.callback_query(F.data == 'change_wallet')
async def handle_change_wallet(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await bot.send_message(
        user_id,
        "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å–≤–æ–µ–≥–æ Tonkeeper:\n",
        parse_mode='HTML'
    )
    await state.set_state(WalletStates.waiting_for_wallet)
    await callback_query.answer()



@dp.callback_query(F.data == 'qrcode')
async def handle_qrcode(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = await get_user(user_id)
    ref_link = user[2]

   
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=5,
        border=1,
    )
    qr.add_data(ref_link)
    qr.make(fit=True)

    qr_img = qr.make_image(fill_color="black", back_color="white").convert('RGB')


    base_img = Image.open('1080X1920.png')
    qr_img = qr_img.resize((800, 800))  

    position = ((base_img.width - qr_img.width) // 2, base_img.height - qr_img.height - 100)

    combined_img = Image.new('RGB', base_img.size)
    combined_img.paste(base_img, (0, 0))
    combined_img.paste(qr_img, position)


    final_img_path = 'final_image_with_qr.png'
    combined_img.save(final_img_path)

    photo = FSInputFile(final_img_path)
    await bot.send_photo(user_id, photo, caption="–í–æ—Ç –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π QR-–∫–æ–¥!")

    await callback_query.answer() 
class YoutubeTaskStates(StatesGroup):
    waiting_for_youtube_answer = State()
    waiting_for_instagram_answer = State()
    waiting_for_twitter_answer =  State()
@dp.callback_query(lambda c: c.data == 'quest')
async def handle_quest(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    await send_next_task(user_id)
    await callback_query.answer()



@dp.callback_query(lambda c: c.data and c.data.startswith('check_youtube_'))
async def check_youtube_task(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id

    await state.set_state(YoutubeTaskStates.waiting_for_youtube_answer)
    await state.update_data(youtube_task=2)
    
    await bot.send_message(
        user_id,
        "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–µ–π–ª–∏—Å—Ç —Å –ø—Ä—è–º—ã–º–∏ —ç—Ñ–∏—Ä–∞–º–∏ –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ?:"
    )
@dp.message(YoutubeTaskStates.waiting_for_youtube_answer)
async def handle_youtube_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()

    if data.get('youtube_task') == 2:
        answer = message.text.strip()
        if answer.lower() == "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ–±–∑–æ—Ä":
            task = tasks[1]
            cursor.execute("UPDATE users SET balance = COALESCE(balance, 0) + %s, current_task = current_task + 1 WHERE user_id = %s", (task['reward'], user_id))
            conn.commit()

            await bot.send_message(
                user_id,
                f"–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª {task['reward']} $B1COIN!"
            )
            await state.clear()
            await send_next_task(user_id)
        else:
            photo = FSInputFile("images/2.jpg")
            await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏–µ.")    

            await handle_quest(callback_query=types.CallbackQuery(id="dummy", from_user=types.User(id=user_id, is_bot=False), message=None, data="quest"), state=state)
    else:
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.")

@dp.callback_query(lambda c: c.data and c.data.startswith('check_instagram_'))
async def check_instagram_task(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user = await get_user(user_id)
    current_task_id = user[-1]

    if current_task_id == 2:
        await state.set_state(YoutubeTaskStates.waiting_for_instagram_answer)
        await state.update_data(instagram_task=3)

        await bot.send_message(
            user_id,
            "–ö–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ö–µ—à—Ç–µ–≥ —É–∫–∞–∑–∞–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞?:"
        )

    await callback_query.answer()
@dp.message(YoutubeTaskStates.waiting_for_instagram_answer)
async def handle_instagram_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()

    if data.get('instagram_task') == 3:
        answer = message.text.strip()
        if answer.lower() == "#b1coin":
            task = tasks[2]
            cursor.execute("UPDATE users SET balance = COALESCE(balance, 0) + %s, current_task = current_task + 1 WHERE user_id = %s", (task['reward'], user_id))
            conn.commit()

            await bot.send_message(
                user_id,
                f"–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª {task['reward']} $B1COIN!"
            )
            await state.clear()
            await send_next_task(user_id)
        else:
            photo = FSInputFile("images/2.jpg")
            await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏–µ.")  
            await handle_quest(callback_query=types.CallbackQuery(id="dummy", from_user=types.User(id=user_id, is_bot=False), message=None, data="quest"), state=state)
    else:
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.")

@dp.callback_query(lambda c: c.data and c.data.startswith('check_twitter_'))
async def check_twitter_task(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user = await get_user(user_id)
    current_task_id = user[-1]

    if current_task_id == 3: 
        await state.set_state(YoutubeTaskStates.waiting_for_twitter_answer)
        await state.update_data(twitter_task=4)

        await bot.send_message(
            user_id,
            "–ö–∞–∫–æ–π —Ö–µ—à—Ç–µ–≥ —É–∫–∞–∑–∞–Ω –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ç–≤–∏—Ç–µ?:"
        )

    await callback_query.answer()
@dp.message(YoutubeTaskStates.waiting_for_twitter_answer)
async def handle_twitter_answer(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()

    if data.get('twitter_task') == 4:
        answer = message.text.strip()
        if answer.lower() == "#b1coinarmy":
            task = tasks[3]
            cursor.execute("UPDATE users SET balance = COALESCE(balance, 0) + %s, current_task = current_task + 1 WHERE user_id = %s", (task['reward'], user_id))
            conn.commit()

            await bot.send_message(
                user_id,
                f"–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞–Ω–∏–µ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª {task['reward']} $B1COIN!"
            )
            photo = FSInputFile("images/21.jpg")
            await bot.send_photo(user_id, photo, caption="–ó–∞–¥–∞–Ω–∏–µ #4–ê/15: –ö–í–ò–ó $B1COIN.\n\n–î–æ—Ä–æ–≥–æ–π —á–µ–ª–æ–≤–µ–∫, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è... –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Ä—è–¥—ã $B1COIN ARMY, –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Ü–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –∞–∏—Ä–¥—Ä–æ–ø–∞.\n\n–ö–í–ò–ó: –≠—Ç–æ 7 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º 1–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ 3—Ö.\n\n–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å 50 $B1COIN.")

            await state.clear()
            await send_next_task(user_id)
        else:
            photo = FSInputFile("images/2.jpg")
            await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏–µ.")  
            await handle_quest(callback_query=types.CallbackQuery(id="dummy", from_user=types.User(id=user_id, is_bot=False), message=None, data="quest"), state=state)
    else:
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ.")
@dp.callback_query(lambda c: c.data and c.data.startswith('answer_'))
async def handle_quiz_answer(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    data = callback_query.data.split('_')
    task_id = int(data[1])
    selected_option = int(data[2])
    user = await get_user(user_id)
    current_task_id = user[-1]
    
    if task_id == current_task_id:
        task = tasks[current_task_id]
        correct_text = task.get('correct_text', "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
        incorrect_text = task.get('incorrect_text', "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        if selected_option == task['correct_option']:
            reward = task['reward']
            cursor.execute("UPDATE users SET balance = COALESCE(balance, 0) + %s, current_task = current_task + 1 WHERE user_id = %s", (reward, user_id))
            conn.commit()
            cursor.execute("UPDATE users SET balance_q = COALESCE(balance_q, 0) + %s WHERE user_id = %s", (reward, user_id))
            conn.commit()
            photo = FSInputFile("images/4.jpg")
            await bot.send_photo(user_id, photo, caption=f"{correct_text}")
            if task_id == 10:
                user2 = await get_user(user_id)
                photo = FSInputFile("images/15.jpg")
                await bot.send_photo(user_id, photo, caption=f"–ö–ª–∞—Å—Å! –¢—ã –ø—Ä–æ—à–µ–ª –∫–≤–∏–∑!\n\n–°–≤–µ—Ç–ª—ã–µ –≥–æ–ª–æ–≤—ã –Ω—É–∂–Ω—ã –Ω–∞—à–µ–º—É –∫–æ–º—å—é–Ω–∏—Ç–∏...\n\n–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {user2[6]} $B1COIN.\n\n–í–µ–ª–∫–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è!")
        else:
            cursor.execute("UPDATE users SET current_task = current_task + 1 WHERE user_id = %s", (user_id,))
            conn.commit()
            photo = FSInputFile("images/4.jpg")
            await bot.send_photo(user_id, photo, caption=f"{incorrect_text}")
            if task_id == 10:
                user2 = await get_user(user_id)
                photo = FSInputFile("images/15.jpg")
                await bot.send_photo(user_id, photo, caption=f"–ö–ª–∞—Å—Å! –¢—ã –ø—Ä–æ—à–µ–ª –∫–≤–∏–∑!\n\n–°–≤–µ—Ç–ª—ã–µ –≥–æ–ª–æ–≤—ã –Ω—É–∂–Ω—ã –Ω–∞—à–µ–º—É –∫–æ–º—å—é–Ω–∏—Ç–∏...\n\n–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {user2[6]} $B1COIN.\n\n–í–µ–ª–∫–æ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è!")
        await send_next_task(user_id)
    else:
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ.")

    await callback_query.answer()

async def send_next_task(user_id):
    user = await get_user(user_id)
    current_task_id = user[-1]
    if current_task_id < len(tasks):
        task = tasks[current_task_id]
        if 'optionss' in task:

            task_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text=option, callback_data=f"answer_{current_task_id}_{i}") for i, option in enumerate(task['optionss'])
                ],
                [
                    InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")
                ]
            ])
        elif task.get('type') == 'twitter':
            task_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏", url=task['link'])],
                [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üòï", callback_data=f"skip_task_{task['id']}")],
                [InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")]
            ])
        elif task.get('referral'):
            task_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞–ª–µ–µ üòé", callback_data=f"send_task_{task['id']}")],
                [InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å üë•", callback_data="ref_b")],
                [InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")]
            ])
        elif task.get('type') == 'comments' and task.get('platform', '') != 'Instagram':
            task_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data=f"check_comments_{task['id']}")],
                [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üôÇ", callback_data=f"skip_task_{task['id']}")],
                [InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")]
            ])
        elif task.get('platform', '') == 'Instagram' and task.get('type') == 'comments':
            task['description'] = f"–í Instagram-–∞–∫–∫–∞—É–Ω—Ç–µ —Ç–æ–∫–µ–Ω–∞ $B1COIN:\n{latest_posts[0]}\n{latest_posts[1]}\n{latest_posts[2]}\n"
            task_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ #1", url=latest_posts[0])],
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ #2", url=latest_posts[1])],
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ #3", url=latest_posts[2])],
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data=f"check_task_{task['id']}")],
                [InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")]
            ])
        elif task['id'] == 2:  
            task_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ YouTube", url=task['link'])],
                
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data=f"check_youtube_{task['id']}")]
                
            ])
        elif task['id'] == 3: 
            task_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Instagram", url=task['link'])],
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data=f"check_instagram_{task['id']}")],
                [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üôÇ", callback_data=f"skip_task_{task['id']}")]
                
                
            ])
        elif task['id'] == 1:
             task_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data=f"check_task_{task['id']}")],
                
                [InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")]
            ])
        elif task['id'] == 4:
            task_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ Twitter(X)", url=task['link'])],
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data=f"check_twitter_{task['id']}")],
                [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üôÇ", callback_data=f"skip_task_{task['id']}")],
                [InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")]
            ])
        else:
            task_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data=f"check_task_{task['id']}")],
                [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üôÇ", callback_data=f"skip_task_{task['id']}")],
                [InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")]
            ])
        photos = ['images/5.jpg','images/6.jpg','images/7.jpg','images/8.jpg','images/9.jpg','images/10.jpg','images/11.jpg','images/12.jpg','images/13.jpg','images/14.jpg','images/15.jpg',
                'images/16.jpg','images/17.jpg','images/18.jpg','images/20.jpg','images/21.jpg','images/22.jpg','images/23.jpg','images/24.jpg'        
        ]
        
        if 'options' in task:
            photo = FSInputFile(random.choice(photos))
            await bot.send_photo(user_id, photo, caption=f"{task['title']}\n\n{task['description']}\n\n{task['options'][0]}\n{task['options'][1]}\n{task['options'][2]}\n\n–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å {task['reward']} $B1COIN.",
                reply_markup=task_keyboard)
        else:
            photo = FSInputFile(random.choice(photos))
            await bot.send_photo(user_id, photo, caption=f"{task['title']}\n\n{task['description']}\n\n–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å {task['reward']} $B1COIN.",
                reply_markup=task_keyboard)  
    else:
        photo = FSInputFile("images/7.jpg")
        await bot.send_photo(user_id, photo, caption="–ü–æ–∫–∞ —á—Ç–æ –∑–∞–¥–∞–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç!\n\n–ù–æ –Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Å—è‚Ä¶ –ï—â–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ–º —Å —Ç–æ–±–æ–π –∫—É—á—É $B1COIN !\n\nüèéÔ∏èüí® –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è –≤ –º–µ–Ω—é –∏ –ø—Ä–∏–≥–ª–∞—à–∞–π –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –ª—é–¥–µ–π, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ $B1COIN !")


@dp.callback_query(lambda c: c.data and c.data.startswith('skip_task_'))
async def handle_skip_task(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = await get_user(user_id)
    current_task_id = user[-1]
    task_id = user[-1]
    cursor.execute("UPDATE users SET current_task =current_task + 1 WHERE user_id = %s", (user_id,))
    conn.commit()
    if (task_id == 3):
        photo = FSInputFile("images/21.jpg")
        await bot.send_photo(user_id, photo, caption="–ó–∞–¥–∞–Ω–∏–µ #4–ê/15: –ö–í–ò–ó $B1COIN.\n\n–î–æ—Ä–æ–≥–æ–π —á–µ–ª–æ–≤–µ–∫, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è... –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Ä—è–¥—ã $B1COIN ARMY, –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —Ü–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –Ω–∞—à–µ–≥–æ –∞–∏—Ä–¥—Ä–æ–ø–∞.\n\n–ö–í–ò–ó: –≠—Ç–æ 7 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º 1–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ 3—Ö.\n\n–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç—ã –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å 50 $B1COIN.")

    await send_next_task(user_id)
    await callback_query.answer()
@dp.callback_query(lambda c: c.data and c.data.startswith('send_task_'))
async def handle_send_task(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    task_id = int(callback_query.data.split('_')[-1])
    cursor.execute("UPDATE users SET current_task = %s WHERE user_id = %s", (task_id,user_id,))
    conn.commit()
    await send_next_task(user_id)
    await callback_query.answer()
@dp.callback_query(lambda c: c.data and c.data.startswith('check_comments_'))
async def check_comments(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user = await get_user(user_id)
    task_id = user[-1]
    current_task_id = user[-1]
    task = tasks[current_task_id]
    
    if task_id == current_task_id:
        group_id = task['channel']
        
        try:
            comments_data = await get_last_posts_comments(group_id)
            user_commented = any(
                any(comment['user'] == callback_query.from_user.username for comment in post['comments'])
                for post in comments_data
            )
            if user_commented:
                reward = task['reward']
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                cursor.execute(
                    "UPDATE users SET balance = COALESCE(balance, 0) + %s, current_task = current_task + 1 WHERE user_id = %s",
                    (reward, user_id)
                )
                conn.commit()
                cursor.execute(
                    "SELECT balance FROM users WHERE user_id = %s",
                    (user_id,)
                )
                user_balance = cursor.fetchone()[0]
                
                await bot.send_message(user_id, f"–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {reward} $B1COIN! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {user_balance} $B1COIN.")
                await send_next_task(user_id)
            else:
                await bot.send_message(user_id, "–¢—ã –µ—â–µ –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ—Ö –ø–æ—Å—Ç–∞—Ö.")
        except Exception as e:
            print(f"–û—à–∏—å–∫–∞ {e}")

    else:
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ.")

    await callback_query.answer()



@dp.message(F.text.contains('https://x.com/'))
async def handle_twitter_link(message: types.Message):
    user_id = message.from_user.id
    user = await get_user(user_id)
    current_task_id = user[-1]

    if current_task_id < len(tasks):
        task = tasks[current_task_id]
        if task.get('type') == 'twitter':
            tweet_link = message.text.strip()
            if validate_tweet_link(tweet_link):
                reward = task['reward']
                cursor.execute("UPDATE users SET balance = COALESCE(balance, 0) + %s, current_task = current_task + 1 WHERE user_id = %s", (reward, user_id))
                conn.commit()
                await bot.send_message(
                    user_id,
                    f"–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {reward} $B1COIN! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {user[3] + reward if user[3] else reward} $B1COIN.",
                )
                await send_next_task(user_id)
            else:
                await bot.send_message(
                    user_id,
                    "üòµ‚Äçüí´ –õ–∏–±–æ —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –ë–∏–∫–æ–Ω–∞, –ª–∏–±–æ —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞! –û—Ç–ø—Ä–∞–≤—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π —Ä–µ–ø–æ—Å—Ç –Ω–∏–∂–µ:"
                )
        else:
            await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
    else:
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ.")

def validate_tweet_link(tweet_link):
    return tweet_link.startswith("https://x.com/")

@dp.callback_query(lambda c: c.data and c.data.startswith('check_task_'))
async def check_task(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    user = await get_user(user_id)
    task_id = user[-1]
    current_task_id = user[-1]

    if task_id == current_task_id:
        task = tasks[current_task_id]
        reward = task['reward']
        if await check_subscriptions2(user_id):
            cursor.execute("UPDATE users SET balance = COALESCE(balance, 0) + %s, current_task = current_task + 1 WHERE user_id = %s", (reward, user_id))
            conn.commit()

            await bot.send_message(
                user_id,
                f"–¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª {reward} $B1COIN! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {user[3] + reward if user[3] else reward} $B1COIN.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é üöÄ", callback_data="quest")],
                    [InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")]
                ])
            )
        else:
            task_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å ‚úÖ", callback_data=f"check_task_{task['id']}")],
                [InlineKeyboardButton(text="–ú–µ–Ω—é ü™ß", callback_data="menu_b")]
            ])
            photo = FSInputFile("images/2.jpg")
            await bot.send_photo(user_id, photo, caption="üòµ‚Äçüí´ –ë–∏–∫–æ–Ω–∞ –Ω–µ –ø—Ä–æ–≤–µ–¥–µ—à—å! –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏–µ.")  
    else:
        await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ.")

    await callback_query.answer()
    
async def main():
    # Initial update of latest posts
    await update_latest_posts()
    
    # Schedule the update at 9:00 AM every day
    aiocron.crontab('0 9 * * *', func=update_latest_posts, start=True)

    # Start the bot polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
